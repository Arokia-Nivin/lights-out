{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAroundMe","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","state","board","createBoard","hasWon","_this$props","ncols","nrows","i","rows","j","push","Math","random","_this$props2","coord","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","toggle","setState","every","row","cell","_this2","content","_this$props3","_loop","coords","concat","td","src_Cell_0","key","flipCellsAround","defaultProps","App","src_Board_0","Boolean","window","location","hostname","match","alert","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ff9813be.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport \"./Cell.css\"\r\n\r\n\r\nclass Cell extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick(evt) {\r\n    this.props.flipCellsAroundMe();\r\n  }\r\n\r\n  render() {\r\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\r\n\r\n    return (\r\n        <td className={classes} onClick={this.handleClick} />\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Cell","import React, {Component} from \"react\";\r\nimport Cell from \"./Cell\";\r\nimport './Board.css';\r\n\r\nclass Board extends Component {\r\n  static defaultProps={\r\n    nrows:5, \r\n    ncols:5 \r\n  }\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      board: this.createBoard(),\r\n      hasWon:false,\r\n    }\r\n    this.handleClick=this.handleClick.bind(this); \r\n  }\r\n\r\n\r\n  createBoard() {\r\n    let {ncols, nrows} = this.props;\r\n    let board = [];\r\n    for (let i=0;i<nrows;i++){\r\n      let rows=[];\r\n      for (let j=0;j<ncols;j++){\r\n          rows.push(Math.random()<=0.2); \r\n      }\r\n      board.push(rows); \r\n    }\r\n    return board;\r\n  }\r\n\r\n  toggle(i,j,board){\r\n    let {ncols, nrows} = this.props;\r\n    if (i >= 0 && i < nrows && j >= 0 &&  j< ncols  ) {\r\n      board[i][j] = !board[i][j];\r\n    }\r\n  }\r\n\r\n  flipCellsAround(coord) {\r\n    let [i, j] = coord.split(\"-\").map(Number);\r\n    let board= this.state.board; \r\n    this.toggle(i,j,board);\r\n    this.toggle(i-1,j,board); \r\n    this.toggle(i+1,j,board); \r\n    this.toggle(i,j-1,board);\r\n    this.toggle(i,j+1,board); \r\n    this.setState({ board:board, hasWon:board.every(row=> row.every(cell => !cell))})\r\n  }\r\n\r\n  handleClick(){\r\n    this.setState({\r\n      board: this.createBoard(),\r\n      hasWon:false,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasWon){\r\n        return (\r\n          <div className='Board-message'>\r\n            <h1 className=\"Board-winner\">Lights Out!! You Won the Game</h1>\r\n            <button className=\"Board-reset\" onClick={this.handleClick}>Restart</button>\r\n          </div>\r\n        )\r\n    }\r\n\r\n      let content=[]; \r\n      let {ncols, nrows} = this.props;\r\n      let board = this.state.board;\r\n\r\n      for (let i=0;i<nrows;i++){\r\n        let row=[] \r\n        for (let j=0;j<ncols;j++){\r\n            let coords= `${i}-${j}`\r\n            let td=<Cell key={coords} isLit={board[i][j]} flipCellsAroundMe={()=>this.flipCellsAround(coords)} />; \r\n            row.push(td); \r\n        }\r\n        content.push(<tr key={i}>{row}</tr>)\r\n\r\n    }\r\n      return (\r\n        <div>\r\n          <div className=\"Board-title\">\r\n            <div className='Board-name'>Lights Out</div>\r\n          </div>\r\n          <table className=\"Board\">\r\n            <tbody>\r\n              {content}\r\n            </tbody>\r\n          </table>\r\n          <button className=\"Board-reset\"onClick={this.handleClick}>Reset</button>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Board;\r\n","import React, { Component } from \"react\";\r\nimport Board from \"./Board\";\r\nimport \"./App.css\";\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className='App'>\r\n        <Board/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nalert(`Welcome to this game !! \r\nThis game consists of a 5 by 5 grid of lights.\r\nWhen the game starts, a random number of these grids are switched on. \r\nPressing any of the grids will toggle it and the four adjacent grids too.\r\nThe goal of the puzzle is to switch all the lights off !!`)\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}